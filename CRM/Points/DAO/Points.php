<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from uk.org.futurefirst.networks.civipoints/xml/schema/CRM/Points/Points.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:1a2a66c339ff3172560314c6c110126b)
 */
use CRM_Points_ExtensionUtil as E;

/**
 * Database access object for the Points entity.
 */
class CRM_Points_DAO_Points extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '4.4';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_points';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Points ID
   *
   * @var int
   */
  public $id;

  /**
   * FK to Winning Contact
   *
   * @var int
   */
  public $contact_id;

  /**
   * FK to Granting Contact
   *
   * @var int
   */
  public $grantor_contact_id;

  /**
   * Number of points granted/removed
   *
   * @var int
   */
  public $points;

  /**
   * Points granted at this date/time
   *
   * @var datetime
   */
  public $grant_date_time;

  /**
   * Points effective from this date inclusive
   *
   * @var date
   */
  public $start_date;

  /**
   * Points effective upto this date inclusive
   *
   * @var date
   */
  public $end_date;

  /**
   * Description
   *
   * @var string
   */
  public $description;

  /**
   * Points granted because of an entity of this type
   *
   * @var string
   */
  public $entity_table;

  /**
   * Points granted because of an entity with this ID
   *
   * @var int
   */
  public $entity_id;

  /**
   * Option value for the type of points being granted
   *
   * @var string
   */
  public $points_type_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_points';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Pointses') : E::ts('Points');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contact_id', 'civicrm_contact', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'grantor_contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Points ID'),
          'required' => TRUE,
          'where' => 'civicrm_points.id',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => '4.4',
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Winning Contact'),
          'required' => TRUE,
          'where' => 'civicrm_points.contact_id',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => '4.4',
        ],
        'grantor_contact_id' => [
          'name' => 'grantor_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Granting Contact'),
          'where' => 'civicrm_points.grantor_contact_id',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => '4.4',
        ],
        'points' => [
          'name' => 'points',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Points'),
          'description' => E::ts('Number of points granted/removed'),
          'required' => TRUE,
          'where' => 'civicrm_points.points',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'grant_date_time' => [
          'name' => 'grant_date_time',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Grant Date Time'),
          'description' => E::ts('Points granted at this date/time'),
          'required' => TRUE,
          'where' => 'civicrm_points.grant_date_time',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'start_date' => [
          'name' => 'start_date',
          'type' => CRM_Utils_Type::T_DATE,
          'title' => E::ts('Start Date'),
          'description' => E::ts('Points effective from this date inclusive'),
          'required' => TRUE,
          'where' => 'civicrm_points.start_date',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'end_date' => [
          'name' => 'end_date',
          'type' => CRM_Utils_Type::T_DATE,
          'title' => E::ts('End Date'),
          'description' => E::ts('Points effective upto this date inclusive'),
          'where' => 'civicrm_points.end_date',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Description'),
          'description' => E::ts('Description'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_points.description',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'entity_table' => [
          'name' => 'entity_table',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Entity Table'),
          'description' => E::ts('Points granted because of an entity of this type'),
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_points.entity_table',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'entity_id' => [
          'name' => 'entity_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Points granted because of an entity with this ID'),
          'where' => 'civicrm_points.entity_id',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'points_type_id' => [
          'name' => 'points_type_id',
          'type' => CRM_Utils_Type::T_STRING,
          'description' => E::ts('Option value for the type of points being granted'),
          'required' => TRUE,
          'maxlength' => 512,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_points.points_type_id',
          'table_name' => 'civicrm_points',
          'entity' => 'Points',
          'bao' => 'CRM_Points_DAO_Points',
          'localizable' => 0,
          'pseudoconstant' => [
            'optionGroupName' => 'points_type',
            'optionEditPath' => 'civicrm/admin/options/points_type',
          ],
          'add' => '4.4',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'points', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'points', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_date' => [
        'name' => 'index_date',
        'field' => [
          0 => 'start_date',
          1 => 'end_date',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_points::0::start_date::end_date',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
